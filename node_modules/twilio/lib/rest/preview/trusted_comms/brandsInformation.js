'use strict';

/* jshint ignore:start */
/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */
/* jshint ignore:end */

var Q = require('q');  /* jshint ignore:line */
var _ = require('lodash');  /* jshint ignore:line */
var util = require('util');  /* jshint ignore:line */
var Page = require('../../../base/Page');  /* jshint ignore:line */
var deserialize = require(
    '../../../base/deserialize');  /* jshint ignore:line */
var values = require('../../../base/values');  /* jshint ignore:line */

var BrandsInformationList;
var BrandsInformationPage;
var BrandsInformationInstance;

/* jshint ignore:start */
/**
 * Initialize the BrandsInformationList
 *
 * PLEASE NOTE that this class contains preview products that are subject to
 * change. Use them with caution. If you currently do not have developer preview
 * access, please contact help@twilio.com.
 *
 * @constructor Twilio.Preview.TrustedComms.BrandsInformationList
 *
 * @param {Twilio.Preview.TrustedComms} version - Version of the resource
 */
/* jshint ignore:end */
BrandsInformationList = function BrandsInformationList(version) {
  /* jshint ignore:start */
  /**
   * @function brandsInformation
   * @memberof Twilio.Preview.TrustedComms#
   *
   * @param {string} sid - sid of instance
   *
   * @returns {Twilio.Preview.TrustedComms.BrandsInformationContext}
   */
  /* jshint ignore:end */
  function BrandsInformationListInstance(sid) {
    return BrandsInformationListInstance.get(sid);
  }

  BrandsInformationListInstance._version = version;
  // Path Solution
  BrandsInformationListInstance._solution = {};
  BrandsInformationListInstance._uri = `/BrandsInformation`;
  /* jshint ignore:start */
  /**
   * Streams BrandsInformationInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory
   * efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @function each
   * @memberof Twilio.Preview.TrustedComms.BrandsInformationList#
   *
   * @param {object} [opts] - Options for request
   * @param {string} [opts.type] - Scope of the brands information to query
   * @param {string} [opts.ifNoneMatch] - Standard `If-None-Match` HTTP header
   * @param {number} [opts.limit] -
   *         Upper limit for the number of records to return.
   *         each() guarantees never to return more than limit.
   *         Default is no limit
   * @param {number} [opts.pageSize] -
   *         Number of records to fetch per request,
   *         when not set will use the default value of 50 records.
   *         If no pageSize is defined but a limit is defined,
   *         each() will attempt to read the limit with the most efficient
   *         page size, i.e. min(limit, 1000)
   * @param {Function} [opts.callback] -
   *         Function to process each record. If this and a positional
   *         callback are passed, this one will be used
   * @param {Function} [opts.done] -
   *          Function to be called upon completion of streaming
   * @param {Function} [callback] - Function to process each record
   */
  /* jshint ignore:end */
  BrandsInformationListInstance.each = function each(opts, callback) {
    if (_.isFunction(opts)) {
      callback = opts;
      opts = {};
    }
    opts = opts || {};
    if (opts.callback) {
      callback = opts.callback;
    }
    if (_.isUndefined(callback)) {
      throw new Error('Callback function must be provided');
    }

    var done = false;
    var currentPage = 1;
    var currentResource = 0;
    var limits = this._version.readLimits({
      limit: opts.limit,
      pageSize: opts.pageSize
    });

    function onComplete(error) {
      done = true;
      if (_.isFunction(opts.done)) {
        opts.done(error);
      }
    }

    function fetchNextPage(fn) {
      var promise = fn();
      if (_.isUndefined(promise)) {
        onComplete();
        return;
      }

      promise.then(function(page) {
        _.each(page.instances, function(instance) {
          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {
            done = true;
            return false;
          }

          currentResource++;
          callback(instance, onComplete);
        });

        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {
          onComplete();
        } else if (!done) {
          currentPage++;
          fetchNextPage(_.bind(page.nextPage, page));
        }
      });

      promise.catch(onComplete);
    }

    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));
  };

  /* jshint ignore:start */
  /**
   * Lists BrandsInformationInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @function list
   * @memberof Twilio.Preview.TrustedComms.BrandsInformationList#
   *
   * @param {object} [opts] - Options for request
   * @param {string} [opts.type] - Scope of the brands information to query
   * @param {string} [opts.ifNoneMatch] - Standard `If-None-Match` HTTP header
   * @param {number} [opts.limit] -
   *         Upper limit for the number of records to return.
   *         list() guarantees never to return more than limit.
   *         Default is no limit
   * @param {number} [opts.pageSize] -
   *         Number of records to fetch per request,
   *         when not set will use the default value of 50 records.
   *         If no page_size is defined but a limit is defined,
   *         list() will attempt to read the limit with the most
   *         efficient page size, i.e. min(limit, 1000)
   * @param {function} [callback] - Callback to handle list of records
   *
   * @returns {Promise} Resolves to a list of records
   */
  /* jshint ignore:end */
  BrandsInformationListInstance.list = function list(opts, callback) {
    if (_.isFunction(opts)) {
      callback = opts;
      opts = {};
    }
    opts = opts || {};
    var deferred = Q.defer();
    var allResources = [];
    opts.callback = function(resource, done) {
      allResources.push(resource);

      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {
        done();
      }
    };

    opts.done = function(error) {
      if (_.isUndefined(error)) {
        deferred.resolve(allResources);
      } else {
        deferred.reject(error);
      }
    };

    if (_.isFunction(callback)) {
      deferred.promise.nodeify(callback);
    }

    this.each(opts);
    return deferred.promise;
  };

  /* jshint ignore:start */
  /**
   * Retrieve a single page of BrandsInformationInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @function page
   * @memberof Twilio.Preview.TrustedComms.BrandsInformationList#
   *
   * @param {object} [opts] - Options for request
   * @param {string} [opts.type] - Scope of the brands information to query
   * @param {string} [opts.ifNoneMatch] - Standard `If-None-Match` HTTP header
   * @param {string} [opts.pageToken] - PageToken provided by the API
   * @param {number} [opts.pageNumber] -
   *          Page Number, this value is simply for client state
   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50
   * @param {function} [callback] - Callback to handle list of records
   *
   * @returns {Promise} Resolves to a list of records
   */
  /* jshint ignore:end */
  BrandsInformationListInstance.page = function page(opts, callback) {
    if (_.isFunction(opts)) {
      callback = opts;
      opts = {};
    }
    opts = opts || {};

    var deferred = Q.defer();
    var data = values.of({
      'Type': _.get(opts, 'type'),
      'PageToken': opts.pageToken,
      'Page': opts.pageNumber,
      'PageSize': opts.pageSize
    });
    var headers = values.of({'If-None-Match': _.get(opts, 'ifNoneMatch')});

    var promise = this._version.page({uri: this._uri, method: 'GET', params: data, headers: headers});

    promise = promise.then(function(payload) {
      deferred.resolve(new BrandsInformationPage(this._version, payload, this._solution));
    }.bind(this));

    promise.catch(function(error) {
      deferred.reject(error);
    });

    if (_.isFunction(callback)) {
      deferred.promise.nodeify(callback);
    }

    return deferred.promise;
  };

  /* jshint ignore:start */
  /**
   * Retrieve a single target page of BrandsInformationInstance records from the API.
   *
   * The request is executed immediately.
   *
   * If a function is passed as the first argument, it will be used as the callback
   * function.
   *
   * @function getPage
   * @memberof Twilio.Preview.TrustedComms.BrandsInformationList#
   *
   * @param {string} [targetUrl] - API-generated URL for the requested results page
   * @param {function} [callback] - Callback to handle list of records
   *
   * @returns {Promise} Resolves to a list of records
   */
  /* jshint ignore:end */
  BrandsInformationListInstance.getPage = function getPage(targetUrl, callback) {
    var deferred = Q.defer();

    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});

    promise = promise.then(function(payload) {
      deferred.resolve(new BrandsInformationPage(this._version, payload, this._solution));
    }.bind(this));

    promise.catch(function(error) {
      deferred.reject(error);
    });

    if (_.isFunction(callback)) {
      deferred.promise.nodeify(callback);
    }

    return deferred.promise;
  };

  /* jshint ignore:start */
  /**
   * Provide a user-friendly representation
   *
   * @function toJSON
   * @memberof Twilio.Preview.TrustedComms.BrandsInformationList#
   *
   * @returns Object
   */
  /* jshint ignore:end */
  BrandsInformationListInstance.toJSON = function toJSON() {
    return this._solution;
  };

  BrandsInformationListInstance[util.inspect.custom] = function inspect(depth,
      options) {
    return util.inspect(this.toJSON(), options);
  };

  return BrandsInformationListInstance;
};


/* jshint ignore:start */
/**
 * Initialize the BrandsInformationPage
 *
 * PLEASE NOTE that this class contains preview products that are subject to
 * change. Use them with caution. If you currently do not have developer preview
 * access, please contact help@twilio.com.
 *
 * @constructor Twilio.Preview.TrustedComms.BrandsInformationPage
 *
 * @param {TrustedComms} version - Version of the resource
 * @param {Response<string>} response - Response from the API
 * @param {BrandsInformationSolution} solution - Path solution
 *
 * @returns BrandsInformationPage
 */
/* jshint ignore:end */
BrandsInformationPage = function BrandsInformationPage(version, response,
                                                        solution) {
  // Path Solution
  this._solution = solution;

  Page.prototype.constructor.call(this, version, response, this._solution);
};

_.extend(BrandsInformationPage.prototype, Page.prototype);
BrandsInformationPage.prototype.constructor = BrandsInformationPage;

/* jshint ignore:start */
/**
 * Build an instance of BrandsInformationInstance
 *
 * @function getInstance
 * @memberof Twilio.Preview.TrustedComms.BrandsInformationPage#
 *
 * @param {BrandsInformationPayload} payload - Payload response from the API
 *
 * @returns BrandsInformationInstance
 */
/* jshint ignore:end */
BrandsInformationPage.prototype.getInstance = function getInstance(payload) {
  return new BrandsInformationInstance(this._version, payload);
};

/* jshint ignore:start */
/**
 * Provide a user-friendly representation
 *
 * @function toJSON
 * @memberof Twilio.Preview.TrustedComms.BrandsInformationPage#
 *
 * @returns Object
 */
/* jshint ignore:end */
BrandsInformationPage.prototype.toJSON = function toJSON() {
  let clone = {};
  _.forOwn(this, function(value, key) {
    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {
      clone[key] = value;
    }
  });
  return clone;
};

BrandsInformationPage.prototype[util.inspect.custom] = function inspect(depth,
    options) {
  return util.inspect(this.toJSON(), options);
};


/* jshint ignore:start */
/**
 * Initialize the BrandsInformationContext
 *
 * PLEASE NOTE that this class contains preview products that are subject to
 * change. Use them with caution. If you currently do not have developer preview
 * access, please contact help@twilio.com.
 *
 * @constructor Twilio.Preview.TrustedComms.BrandsInformationInstance
 *
 * @property {brands_information.event_type} eventType -
 *          Scope of the brands information associated to the `file_link`
 * @property {Date} updateTime - Creation time of the information retrieved
 * @property {string} fileLink - The URL to the brands information
 * @property {string} fileLinkTtlInSeconds - How long will be the `file_link` valid
 *
 * @param {TrustedComms} version - Version of the resource
 * @param {BrandsInformationPayload} payload - The instance payload
 */
/* jshint ignore:end */
BrandsInformationInstance = function BrandsInformationInstance(version, payload)
    {
  this._version = version;

  // Marshaled Properties
  this.eventType = payload.event_type; // jshint ignore:line
  this.updateTime = deserialize.iso8601DateTime(payload.update_time); // jshint ignore:line
  this.fileLink = payload.file_link; // jshint ignore:line
  this.fileLinkTtlInSeconds = payload.file_link_ttl_in_seconds; // jshint ignore:line

  // Context
  this._context = undefined;
  this._solution = {};
};

/* jshint ignore:start */
/**
 * Provide a user-friendly representation
 *
 * @function toJSON
 * @memberof Twilio.Preview.TrustedComms.BrandsInformationInstance#
 *
 * @returns Object
 */
/* jshint ignore:end */
BrandsInformationInstance.prototype.toJSON = function toJSON() {
  let clone = {};
  _.forOwn(this, function(value, key) {
    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {
      clone[key] = value;
    }
  });
  return clone;
};

BrandsInformationInstance.prototype[util.inspect.custom] = function
    inspect(depth, options) {
  return util.inspect(this.toJSON(), options);
};

module.exports = {
  BrandsInformationList: BrandsInformationList,
  BrandsInformationPage: BrandsInformationPage,
  BrandsInformationInstance: BrandsInformationInstance
};
